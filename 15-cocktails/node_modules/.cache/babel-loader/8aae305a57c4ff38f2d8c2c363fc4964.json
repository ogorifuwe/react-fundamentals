{"ast":null,"code":"var _jsxFileName = \"/Users/oi/Development/client-side/react/free-code-camp-tutorial/react-projects/15-cocktails/setup/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [cocktails, setCocktails] = useState([]);\n\n  const getCocktailsByName = async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {\n        setCocktails(drinks);\n      } else {\n        setCocktails([]);\n      }\n\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => getCocktailsByName(), [searchTerm]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      isLoading,\n      searchTerm,\n      setSearchTerm,\n      cocktails\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/oi/Development/client-side/react/free-code-camp-tutorial/react-projects/15-cocktails/setup/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","isLoading","setIsLoading","searchTerm","setSearchTerm","cocktails","setCocktails","getCocktailsByName","response","fetch","data","json","drinks","error","console","log","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAEpC,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAEW,UAAF,EAAcC,aAAd,IAAgCZ,QAAQ,CAAC,GAAD,CAA9C;AACA,QAAM,CAAEa,SAAF,EAAaC,YAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMe,kBAAkB,GAAG,YAAY;AACrCL,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAaF,IAAnB;;AACA,UAAIE,MAAJ,EAAY;AACVN,QAAAA,YAAY,CAACM,MAAD,CAAZ;AACD,OAFD,MAEO;AACHN,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;;AAEDJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAXD,CAWE,OAAMW,KAAN,EAAa;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACF,GAhBD;;AAkBAnB,EAAAA,SAAS,CAAC,MAAMa,kBAAkB,EAAzB,EAA8B,CAAEJ,UAAF,CAA9B,CAAT;AAEA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,SADK;AAEHE,MAAAA,UAFG;AAGHC,MAAAA,aAHG;AAIHC,MAAAA;AAJG,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGL,QARH,CADF;AAYD,CAtCD,C,CAuCA;;;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAM;AACpC,SAAOvB,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ searchTerm, setSearchTerm ] = useState('a');\n  const [ cocktails, setCocktails ] = useState([]);\n\n  const getCocktailsByName = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const { drinks } = data;\n      if (drinks) {\n        setCocktails(drinks);\n      } else {\n          setCocktails([]);\n      }\n      \n      setIsLoading(false);\n    } catch(error) {\n        console.log(error);\n    }\n  }\n\n  useEffect(() => getCocktailsByName() , [ searchTerm ]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        isLoading,\n          searchTerm,\n          setSearchTerm,\n          cocktails\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}