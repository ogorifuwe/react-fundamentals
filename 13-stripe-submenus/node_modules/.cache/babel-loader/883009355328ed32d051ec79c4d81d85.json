{"ast":null,"code":"var _jsxFileName = \"/Users/oi/Development/client-side/react/free-code-camp-tutorial/react-projects/13-stripe-submenus/setup/src/context.js\";\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(true);\n  const [links] = useState(sublinks);\n  console.log(links);\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSubmenu = () => {\n    setIsSubmenuOpen(true);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      isSidebarOpen,\n      openSidebar,\n      closeSidebar,\n      isSubmenuOpen,\n      openSubmenu,\n      closeSubmenu\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nconst useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppProvider, useGlobalContext };","map":{"version":3,"sources":["/Users/oi/Development/client-side/react/free-code-camp-tutorial/react-projects/13-stripe-submenus/setup/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isSubmenuOpen","setIsSubmenuOpen","links","console","log","openSidebar","closeSidebar","openSubmenu","closeSubmenu","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB;AAGA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAEpC,QAAM,CAAEC,aAAF,EAAiBC,gBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAAES,aAAF,EAAiBC,gBAAjB,IAAsCV,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAAEW,KAAF,IAAYX,QAAQ,CAACE,QAAD,CAA1B;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAEA,QAAMG,WAAW,GAAG,MAAM;AACxBN,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFD;;AAIA,QAAMO,YAAY,GAAG,MAAM;AACzBP,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAFD;;AAIA,QAAMQ,WAAW,GAAG,MAAM;AACxBN,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFD;;AAIA,QAAMO,YAAY,GAAG,MAAM;AACzBP,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAFD;;AAIA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,aADK;AAELO,MAAAA,WAFK;AAGLC,MAAAA,YAHK;AAILN,MAAAA,aAJK;AAKLO,MAAAA,WALK;AAMLC,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUIX,QAVJ,CADF;AAeD,CAtCD;;AAwCA,MAAMY,gBAAgB,GAAG,MAAM;AAC7B,SAAOjB,UAAU,CAACE,UAAD,CAAjB;AACD,CAFD;;AAIA,SAASE,WAAT,EAAsBa,gBAAtB","sourcesContent":["import React, { useState, useContext } from 'react'\nimport sublinks from './data'\n\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n\n  const [ isSidebarOpen, setIsSidebarOpen ] = useState(true);\n  const [ isSubmenuOpen, setIsSubmenuOpen ] = useState(true);\n  const [ links ] = useState(sublinks);\n  console.log(links);\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true)\n  }\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  }\n\n  const openSubmenu = () => {\n    setIsSubmenuOpen(true);\n  }\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        isSidebarOpen,\n        openSidebar,\n        closeSidebar,\n        isSubmenuOpen,\n        openSubmenu,\n        closeSubmenu\n      }}\n    >\n      { children }\n    </AppContext.Provider>  \n  );\n\n}\n\nconst useGlobalContext = () => {\n  return useContext(AppContext);\n}\n\nexport { AppProvider, useGlobalContext };\n"]},"metadata":{},"sourceType":"module"}